# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
commands:   # to be used in multiple jobs ( like anchor & alias) 
  print_pipeline_id:
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID
  sayhello:
    description: "A very simple command for demonstration purposes"
    parameters:
      to:
        type: string
        default: "Hello World"
    steps:
      - run: echo << parameters.to >>

orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
defaults: &defaults    #anchor to share reusable code
  docker:
     - image: circleci/node:13.8.0
jobs:
  print_hello:
      <<: *defaults   #alias to fetch anchor instead of defining dockor image
      #docker:
      #   - image: circleci/node:13.8.0
      steps:
        - run: echo "hello"  
  print_world:
      docker:
          - image: circleci/node:13.8.0
      steps:
        - run: echo "World"  
  print_Name:
      docker:
          - image: circleci/node:13.8.0
      steps:
          - run : 
                name: "echo an env var that is part of our project"
                command: |
                     echo $Name
  save_hello_world_output:
       docker:
          - image: circleci/node:13.8.0
       steps:
          -  run: echo " hello world" > ~/output.txt
          - persist_to_workspace:
              root: ~/
              paths:
                - output.txt
  command_job:
        <<: *defaults
        steps:
            - print_pipeline_id
  print_output_file:
        docker:
          - image: circleci/node:13.8.0 
        steps:
          - attach_workspace:
              at: ~/
          - run: cat ~/output.txt
  Fail_Job:
        <<: *defaults
    steps:
      - run: return 1   # if return not 0 , therefore job failed
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail


workflows:
  # Name the workflow "welcome"
  welcome:
    jobs:
      - print_hello
      - print_world:
          requires:
            - print_hello
      - print_Name
      - save_hello_world_output
      - print_output_file:
          requires:
              - save_hello_world_output
      - command_job
      - Fail_Job
